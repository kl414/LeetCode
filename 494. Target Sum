public class Solution {
    public int findTargetSumWays(int[] nums, int S) {
        /*
        Find a subset of nums that need to be positive, and the rest of them negative, such that the sum is equal to target

        Let P be the positive subset and N be the negative subset
        For example:
        Given nums = [1, 2, 3, 4, 5] and target = 3 then one possible solution is +1-2+3-4+5 = 3
        Here positive subset is P = [1, 3, 5] and negative subset is N = [2, 4]

        Then let's see how this can be converted to a subset sum problem:

                          sum(P) - sum(N) = target
        sum(P) + sum(N) + sum(P) - sum(N) = target + sum(P) + sum(N)
                               2 * sum(P) = target + sum(nums)
        So the original problem has been converted to a subset sum problem as follows:
        Find a subset P of nums such that sum(P) = (target + sum(nums)) / 2

        Note that the above formula has proved that target + sum(nums) must be even
        */
        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
        }
        if(S > sum || (sum + S) % 2 == 1)   return 0;
        return subsetSum(nums, (sum + S) / 2);
    }

    private int subsetSum(int[] nums, int S){
        int[] dp = new int[S + 1];
        dp[0] = 1;
        for (int i = 0; i < nums.length; i++) {
            for (int j = S; j >= nums[i]; j--) {
                dp[j] += dp[j - nums[i]];
            }
        }
        return dp[S];
    }
}
