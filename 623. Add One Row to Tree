/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode addOneRow(TreeNode root, int v, int d) {
        /*
            DFS and no extra space
            In addition to use 1 to indicate attach to left node as required, we can also use 0 to indicate attach to right node;
        */
            if (d == 0 || d == 1) {
                TreeNode newroot = new TreeNode(v);
                newroot.left = d == 1 ? root : null;
                newroot.right = d == 0 ? root : null;
                return newroot;
            }
            if (root != null) {
                root.left  = addOneRow(root.left,  v, d > 2 ? d - 1 : 1);
                root.right = addOneRow(root.right, v, d > 2 ? d - 1 : 0);
            }
            return root;
        
        /*
            BFS
        */
        /*
        if(root == null) return null;
        
        if(d == 1){
            TreeNode node = new TreeNode(v);
            node.left = root;
            return node;
        }
        
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        
        while(!q.isEmpty()){
            if(--d == 0) return root;
            
            int size = q.size();
            for(int i = 0; i < size; i++){
                TreeNode node = q.poll();
                if(d == 1){
                    TreeNode newNode1 = new TreeNode(v);
                    newNode1.left = node.left;
                    TreeNode newNode2 = new TreeNode(v);
                    newNode2.right = node.right;

                    node.left = newNode1;
                    node.right = newNode2;
                }else{
                    if(node.left != null) q.add(node.left);
                    if(node.right != null) q.add(node.right);
                } 
            }
        }
        //should not reach here since d is positive integer
        return root;
        */
    }
}
