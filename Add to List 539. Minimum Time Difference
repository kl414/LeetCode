public class Solution {
    public int findMinDifference(List<String> timePoints) {
        /*
            convert the timePoints to minutes and then compare
        */
        /*
        int min = Integer.MAX_VALUE;
        List<Integer> times = new ArrayList<>();
        for(String str : timePoints){
            String[] tokens = str.split(":");
            int minutes = Integer.parseInt(tokens[0]) * 60 + Integer.parseInt(tokens[1]);
            times.add(minutes);
        }
        
        Collections.sort(times);
        //this is for adding a duplicate of smallest time for comparing, for example 00:00 = 0 mins = 1440 mins
        times.add(times.get(0) + 1440);
        
        for(int i = 1; i < times.size(); i++){
            min = Math.min(times.get(i) - times.get(i-1), min);
        }
        
        return min;
        */
        
        /* 
            There is only 24 * 60 = 1440 possible time points.
        */
        
        boolean[] mark = new boolean[24 * 60];
        for (String time : timePoints) {
            String[] t = time.split(":");
            int h = Integer.parseInt(t[0]);
            int m = Integer.parseInt(t[1]);
            if (mark[h * 60 + m]) return 0;
            mark[h * 60 + m] = true;
        }
        
        int prev = 0, min = Integer.MAX_VALUE;
        int first = Integer.MAX_VALUE, last = Integer.MIN_VALUE;
        for (int i = 0; i < 24 * 60; i++) {
            if (mark[i]) {
                if (first != Integer.MAX_VALUE) {
                    min = Math.min(min, i - prev);
                }
                first = Math.min(first, i);
                last = Math.max(last, i);
                prev = i;
            }
        }
        
        //It only calculates i - prev during the loop. At last, we need to take care the last and first time points. i.e. [00:00,         //10:00, 23:00]. The smallest gap is between 23:00 and 00:00.
        min = Math.min(min, (24 * 60 - last + first));
        
        return min;
    }
}
