public class Solution {
    public int[] findErrorNums(int[] nums) {
        /*
            Sapce(1) solution
            when we encounter a value k, we set the k-1th element negative. If k-1th is already negative we know k is the duplicate. In the second pass we look for ith position where it's value is positive so we know i+1 is the missing one.
        */
        int[] res = new int[2];
        for (int i : nums) {
            if (nums[Math.abs(i) - 1] < 0) 
                res[0] = Math.abs(i);
            else 
                nums[Math.abs(i) - 1] *= -1;
        }
        for (int i=0;i<nums.length;i++) {
            if (nums[i] > 0) 
                res[1] = i+1;
        }
        return res;
        
        /*
            Use HashSet, use sum(1...n) = (n * (n + 1) / 2) and then subtract each from sum
        */
        /*
        Set<Integer> set = new HashSet<>();
        int duplicate = 0;
        int n = nums.length;
        long sum = (n * (n + 1) / 2);
        for(int num : nums){
            if(!set.add(num))
                duplicate = num;
            else
                sum -= num;
        }
        
        return new int[] { duplicate, (int)sum };
        */
    }
}
